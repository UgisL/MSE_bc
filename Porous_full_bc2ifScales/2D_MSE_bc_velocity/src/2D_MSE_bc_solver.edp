// ----------------------------------------------- COPYRIGHT --------------------------------------
// Copyright 2016-2019
// Ugis Lacis, ugis.lacis@gmail.com
// Shervin Bagheri, shervin.bagheri@mech.kth.se
// -------------------------------------------- LICENSE LGPLv3 ------------------------------------
// This file is part of Porous_full_bc2ifScales.
//
// Porous_full_bc2ifScales is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Porous_full_bc2ifScales is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Porous_full_bc2ifScales. If not, see <http://www.gnu.org/licenses/>.
// ---------------------------------------------- DESCRIPTION -------------------------------------
//
// This software is meant to be executed using FreeFem++. You should have recieved a copy
// of it along with Porous_full_bc2ifScales. If not, get it from <http://www.freefem.org/>.
//
// It has been tested to produce accurate results using FreeFem++ version 4.00.
//
// Execute this file by running "FreeFem++ 2D_MSE_bc_solver.edp" in command line (Unix) or
// open it by graphical FreeFem++ dialogue (Windows).  For more detailed description, consult
// documentation in <doc/> and documentation of FreeFem++.

load "UMFPACK64"
load "lapack"
include "include_postProc.idp"

// Reduce output to minimum
verbosity = 0;

// Mesh resolution (n = 1/ds), interface refinement (nI), structure refinement (nS)
int n = 10, nI = 4, nS = 6;

// Switch between "porous" or "textured" surface, and defining pre-sets (with needed parameters,
// check examples_geomDef.edp for examples
// Currently implemented presets:
//    porous:   cylinder, laycyl, ellipse
//    textured: rctcav
macro Type()porous// EOM
macro geomPreset()cylinder// EOM
real thetas = 0.15;
real wdth = 0.5;
real dpth = 0.5;

// Number of geometrical entities to include in the computation (not larger than 6)
macro Nstr()5// EOM
    
// Domain size parameters
real ymin;
real ymax = Nstr;
// Define location of the interface (0 = tip of the upper structure)
// Positive values - rising the interface
real yi = 0.1;
macro itfFlag()above// EOF // Interface flag, "above" or "zero"

// Check that we have reasonable interface locations (producing not too skewed meshes)
IFMACRO(itfFlag,above) assert(yi>=0.01/(n*nI)); ENDIFMACRO
IFMACRO(itfFlag,zero)  assert(yi==0.0); ENDIFMACRO

include "include_geom.idp"
// This provides macros defGeom* to define geometry and genMesh for mesh generation, as
// well as value for ymin coordinate.

// Sampling rate of vertical distance unit length
int Nsamp = 60;

// Problem index
int indk;

// If solving for porous coefficients, must first solve interior problem
// Provides mesh ThP, fefunctions uper, uper1, uper2 for interior solution.
real[int] avgDiv(2);
IFMACRO(Type,porous)
real[int,int] itrK(2,2);
include "include_interK.idp"
ENDIFMACRO

// Define the geometry for the interface cell
// labels: 1 - right, 2 - top, 3 - left, 4 - bottom, 5 - solid structure 8 - interior
// Interior boundary - for jump conditions on surface
defGeomTop
defGeomItf
defGeomBot
IFMACRO(Type,porous)
defGeomPor
ENDIFMACRO

// Generate the mesh for interface cell, ThC
mesh ThC;
genMesh

// Plot the mesh
IFMACRO(Type,porous)
plot(ThP,ThC);
ENDIFMACRO
IFMACRO(Type,textured)
plot(ThC);
ENDIFMACRO

// Define the FE space
fespace UUPhC(ThC,[P2,P2,P1],periodic=[[1,y],[3,y]]);
// Define FE functions for problem solution
UUPhC [u,v,p], [uuc,vvc,ppc];
// Define FE functions for solution storage
UUPhC [uK1,vK1,pK1], [uK2,vK2,pK2], [uL,vL,pL];

// Define the problem for interface permeability
problem stokesKc([u,v,p],[uuc,vvc,ppc],solver=sparsesolver) =
    int2d(ThC)( - (-p + 2.0*dx(u))*dx(uuc) - (dy(u)+dx(v))*dy(uuc)
                - (-p + 2.0*dy(v))*dy(vvc) - (dx(v)+dy(u))*dx(vvc)
                + (dx(u)+dy(v))*ppc  ) 
    + int2d(ThC)( (y<=yi)*((indk==1)*uuc+(indk==2)*vvc) )
IFMACRO(Type,porous)
    + on(5,u=0,v=0) + on(4,u=uper,v=vper);
ENDIFMACRO
IFMACRO(Type,textured)
    + on(5,u=0,v=0);
ENDIFMACRO


// Solve the permeability problem, compute effective parameters
IFMACRO(Type,porous) uper[] = uper1[]; ENDIFMACRO
indk = 1; stokesKc; uK1[] = u[];
real[int,int] itfK(2,2);
real[int,int] tildeF1(1,2), vecF1(1,2);
// Volume average for interface permeability
real avgVu; volAvg(ymax-1,ymax,Nsamp,ThC,u,avgVu) itfK(0,0) = avgVu;
real avgVv; volAvg(ymax-1,ymax,Nsamp,ThC,v,avgVv) itfK(1,0) = avgVv;
// Volume avarage for pressure jump
real avgVpTop; volAvgI(ymax-1,ymax,Nsamp,ThC,p,avgVpTop)
IFMACRO(Type,porous)   real avgVpBot; volAvgI(ymin,ymin+1,Nsamp,ThC,p,avgVpBot) ENDIFMACRO
IFMACRO(Type,textured) real avgVpBot; volAvgI(ymin,yi,Nsamp*(yi-ymin),ThC,p,avgVpBot) ENDIFMACRO
tildeF1(0,0) = avgVpBot - avgVpTop;
// Check the divergence of the solution
avgDiv(0) = int2d(ThC)(dx(u)+dy(v))/int2d(ThC)(1.0);
// Repeate for the second forcing direction
IFMACRO(Type,porous) uper[] = uper2[]; ENDIFMACRO
indk = 2; stokesKc; uK2[] = u[];
volAvg(ymax-1,ymax,Nsamp,ThC,u,avgVu) itfK(0,1) = avgVu;
volAvg(ymax-1,ymax,Nsamp,ThC,v,avgVv) itfK(1,1) = avgVv;
volAvgI(ymax-1,ymax,Nsamp,ThC,p,avgVpTop)
IFMACRO(Type,porous)   volAvgI(ymin,ymin+1,Nsamp,ThC,p,avgVpBot) ENDIFMACRO
IFMACRO(Type,textured) volAvgI(ymin,yi,Nsamp*(yi-ymin),ThC,p,avgVpBot) ENDIFMACRO
tildeF1(0,1) = avgVpBot - avgVpTop;
avgDiv(1) = int2d(ThC)(dx(u)+dy(v))/int2d(ThC)(1.0);
// Transform the resistance vector in velocity space
IFMACRO(Type,porous)
real[int,int] invK = itrK^-1;
vecF1 = tildeF1*invK;
for(int i=0;i<2;i++) vecF1(0,i) = -vecF1(0,i); // Adding negative sign
ENDIFMACRO
IFMACRO(Type,textured) vecF1 = 0; vecF1(0,0) = tildeF1(0,0)/itfK(0,0); ENDIFMACRO

// Define the problem for the slip
problem stokesLc([u,v,p],[uuc,vvc,ppc],solver=sparsesolver) =
    int2d(ThC)( - (-p + 2.0*dx(u))*dx(uuc) - (dy(u)+dx(v))*dy(uuc)
                - (-p + 2.0*dy(v))*dy(vvc) - (dx(v)+dy(u))*dx(vvc)
                + (dx(u)+dy(v))*ppc  )
    + int1d(ThC,8)( uuc )
    + on(4,5,u=0,v=0);

// Solve the slip problem, do the post-processing
real itfL, tldM, itfM, tildeF2, vecF2;
real[int] chckZero(2);
stokesLc; uL[] = u[];
volAvg(ymax-1,ymax,Nsamp,ThC,u,avgVu) itfL        = avgVu;
volAvg(ymax-1,ymax,Nsamp,ThC,v,avgVv) chckZero(0) = avgVv;
volAvgI(ymax-1,ymax,Nsamp,ThC,p,avgVpTop)
IFMACRO(Type,porous)   volAvgI(ymin,ymin+1,Nsamp,ThC,p,avgVpBot) ENDIFMACRO
IFMACRO(Type,textured) volAvgI(ymin,yi,Nsamp*(yi-ymin),ThC,p,avgVpBot) ENDIFMACRO
tildeF2 = avgVpBot - avgVpTop;
volAvg(ymin,yi,Nsamp*(yi-ymin),ThC,u,tldM)
itfM = tldM/itfL;
chckZero(1) = int2d(ThC)(dx(u)+dy(v))/int2d(ThC)(1.0);
vecF2 = tildeF2/itfL;

// Output information about interface cell computation
cout << endl;
cout << " ---------------- Interface cell computation done ---------------- " << endl;
cout << " Investigated interface location yif = " << yi << endl << endl;

cout << " ---------------- Interface permeability" << endl;
cout << " itfK/l^2 = " << itfK << endl;
cout << " tildeF1/(l*mu) = " << tildeF1 << endl;
cout << " vecF1*l/mu = " << vecF1 << endl;
cout << " Average divergence = " << avgDiv << endl << endl;

cout << " ---------------- Interface slip" << endl;
cout << " itfL/l = " << itfL << endl;
cout << " itfM/l = " << itfM << " (tldM/l^2 = " << tldM << ")"<< endl;
cout << " tildeF2/mu = " << tildeF2 << endl;
cout << " vecF2*l/mu = " << vecF2 << endl;
cout << " Checks (divergence, itfnormalvel) = " << chckZero << endl;
cout << " ----------------------------------------------------------------- " << endl << endl;

// Output results to files
{
    ofstream os1("2D_MSE_bc_itrK.txt");
    os1 << itrK(0,0) << " " << itrK(0,1) << endl;
    os1 << itrK(1,0) << " " << itrK(1,1) << endl;
    ofstream os2("2D_MSE_bc_itfK.txt");
    os2 << itfK(0,0) << " " << itfK(0,1) << endl;
    os2 << itfK(1,0) << " " << itfK(1,1) << endl;
    ofstream os3("2D_MSE_bc_vecF1.txt");
    os3 << vecF1(0,0) << " " << vecF1(0,1) << endl;
    ofstream os4("2D_MSE_bc_itfL.txt");  os4 << itfL << endl;
    ofstream os5("2D_MSE_bc_itfM.txt");  os5 << itfM << endl;
    ofstream os6("2D_MSE_bc_vecF2.txt"); os6 << vecF2 << endl;
}

// Output plane averaged results, permeability
linAvgSave(ThC, Nsamp, uK1, vK1, pK1, "2D_bound_cond_Ki1prof.txt")
linAvgSave(ThC, Nsamp, uK2, vK2, pK2, "2D_bound_cond_Ki2prof.txt")
linAvgSave(ThC, Nsamp, uL, vL, pL, "2D_bound_cond_Lprof.txt")

cout << " -------------- Plane average output to file done ---------------- " << endl;

// Plot chosen results (macro and colorscheme defined in the include file)
plotfields("perm",1,80,colorsJET)
plotfields("perm",2,80,colorsJET)
plotfields("slip",1,80,colorsJET)

cout << " ------------------- All computations done ----------------------- " << endl;
