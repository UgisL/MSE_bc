// ----------------------------------------------- COPYRIGHT --------------------------------------
// Copyright 2016-2019
// Ugis Lacis, ugis.lacis@gmail.com
// Shervin Bagheri, shervin.bagheri@mech.kth.se
// -------------------------------------------- LICENSE LGPLv3 ------------------------------------
// This file is part of Porous_full_bc2ifScales.
//
// Porous_full_bc2ifScales is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Porous_full_bc2ifScales is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Porous_full_bc2ifScales. If not, see <http://www.gnu.org/licenses/>.
// ---------------------------------------------- DESCRIPTION -------------------------------------
//
// This software is meant to be executed using FreeFem++. You should have recieved a copy
// of it along with Porous_full_bc2ifScales. If not, get it from <http://www.freefem.org/>.
//
// It has been tested to produce accurate results using FreeFem++ version 4.00.
//
// Execute this file by running "FreeFem++ 2D_MSE_bc_Ksolver.edp" in command line (Unix) or
// open it by graphical FreeFem++ dialogue (Windows).  For more detailed description, consult
// documentation in <doc/> and documentation of FreeFem++.

load "UMFPACK64"
load "lapack"
include "2D_MSE_bc_proc.idp"

// Reduce output to minimum
verbosity = 0;

// Number of geometrical entities to include in the computation (not larger than 6)
macro Nstr()5// EOM

real ymin;
real ymax = Nstr;

// Definition of the porous structure
// Need to defined either geomPreset macro (cylinder,laycyl,ellipse) or
// border macros directly. (note - tip of the top structure must be zero!)

macro geomPreset()cylinder// EOM // cylinder pre-set expects real "thetas" (solid vf) to be defined
real thetas  = 0.15;
// thetas = 0.19634954084936207; // Carraro 2013
//real intfShft = 0.25; // Interface location according to Carraro 2013

// macro geomPreset()laycyl// EOM   // laycyl pre-set expects real "thetas" and "thetas0" (solid vf) to be defined
// real thetas  = 0.05309292;
// real thetas0 = 0.19634954;

// // ellipse pre-set expects real "thetas" (solid vf), "ar" (aspect ratio > 1.0) and "ang" (turn angle) to be defined
// macro geomPreset()ellipse// EOM
// real thetas  = 0.21576872577655;    
// real ar      = 1.85714285937;
// real ang     = 45.0/180.0*pi;
// //real intfShft = 0.5-0.2868216071954984; // Interface location according to Carraro 2013

include "2D_MSE_bc_geom.idp"
// This provides macros defB to define border and genM for mesh generation, as
// well as value for ymin coordinate.

// Mesh resolution
int n=10;
// Interface refinement
int nIntf = 4;
// Structure refinement
int nS = 6;

// Sampling rate of vertical distance unit length
int Nsamp = 60;

// Define location of the interface (0 = tip of the upper structure)
// Positive values - rising the interface
real intfShft = 0.1;
// intfShft = 0.5-0.2868216071954984; // Interface location according to Carraro 2013, ellipse
// intfShft = 0.25; // Interface location according to Carraro 2013, cylinder

// Check that we are above the defined smooth structure (meshing requirement)
assert(intfShft>=0.0001);

// Problem index
int indk;

// First, define and solve the fully periodic interior Darcy problem, just below the interface cell
// Define the geometry
border sqr1p(t=ymin-1.0,ymin) {x= 0.5;        y=t;                    label=1; }
border sqr2p(t=0.5,-0.5)      {x=t;           y=ymin;                 label=2; }
border sqr3p(t=ymin,ymin-1.0) {x=-0.5;        y=t;                    label=3; }
border sqr4p(t=-0.5,0.5)      {x=t;           y=ymin-1.0;             label=4; }
strBd(Nstr)
// Define the mesh for periodic solution
mesh ThP=buildmesh( sqr1p(n)+sqr2p(nIntf*n)+sqr3p(n)+sqr4p(nIntf*n)+genMi(Nstr) );
// Define the FE spaces for periodic domain and solve for the field
fespace UUPhP(ThP,[P2,P2,P1],periodic=[[2,x],[4,x],[1,y],[3,y]]);
UUPhP [uper,vper,pper], [uper1,vper1,pper1], [uper2,vper2,pper2], [uu,vv,pp];
problem stokesKi([uper,vper,pper],[uu,vv,pp],solver=sparsesolver) =
    int2d(ThP)( - (-pper + 2.0*dx(uper))*dx(uu) - (dy(uper)+dx(vper))*dy(uu)
                - (-pper + 2.0*dy(vper))*dy(vv) - (dx(vper)+dy(uper))*dx(vv)
                + (dx(uper)+dy(vper))*pp - 1.0e-10*pper*pp )
    + int2d(ThP)( (indk==1)*uu+(indk==2)*vv )
    + on(5,uper=0,vper=0);

real[int,int] itrK(2,2);
real[int] avgDiv(2);
indk = 1; stokesKi;
itrK(0,0) = int2d(ThP)(uper);
itrK(1,0) = int2d(ThP)(vper);
avgDiv(0) = int2d(ThP)(dx(uper)+dy(vper))/int2d(ThP)(1.0);
uper1[] = uper[];
indk = 2; stokesKi;
itrK(0,1) = int2d(ThP)(uper);
itrK(1,1) = int2d(ThP)(vper);
avgDiv(1) = int2d(ThP)(dx(uper)+dy(vper))/int2d(ThP)(1.0);
uper2[] = uper[];

// Output information about interior computation
cout << endl;
cout << " ------------------ Interior K computation done ------------------ " << endl;
cout << " itrK/l = " << itrK << endl;
cout << " Average divergence = " << avgDiv << endl;
cout << " ----------------------------------------------------------------- " << endl;

// Define geometry for the interface cell, top
border sqr1ct(t=intfShft,ymax) {x= 0.5; y=t;        label=1; }
border sqr2ct(t=0.5,-0.5)      {x=t;    y=ymax;     label=2; }
border sqr3ct(t=ymax,intfShft) {x=-0.5; y=t;        label=3; }
border sqr4ct(t=-0.5,0.5)      {x=t;    y=intfShft; label=8; } // Interior boundary for jump condition
// bottom
border sqr1cb(t=ymin,intfShft)  {x= 0.5; y=t;        label=1; }
border sqr3cb(t=intfShft,ymin)  {x=-0.5; y=t;        label=3; }
border sqr4cb(t=-0.5,0.5)       {x=t;    y=ymin;     label=4; }
// Define interior solid structures
defB

// Generate mesh
mesh ThC=buildmesh( sqr1ct(n*(ymax-intfShft))+sqr2ct(n)      +sqr3ct(n*(ymax-intfShft))
                   +sqr3cb(n*(intfShft-ymin))+sqr4cb(nIntf*n)+sqr1cb(n*(intfShft-ymin))+genM+sqr4ct(nIntf*n) );

// Plot the mesh
plot(ThP,ThC);

// Define the FE space
fespace UUPhC(ThC,[P2,P2,P1],periodic=[[1,y],[3,y]]);
// Define FE functions for problem solution
UUPhC [u,v,p], [uuc,vvc,ppc];
// Define FE functions for solution storage
UUPhC [uK1,vK1,pK1], [uK2,vK2,pK2], [uL,vL,pL];

// Define the problem for interface permeability
problem stokesKc([u,v,p],[uuc,vvc,ppc],solver=sparsesolver) =
    int2d(ThC)( - (-p + 2.0*dx(u))*dx(uuc) - (dy(u)+dx(v))*dy(uuc)
                - (-p + 2.0*dy(v))*dy(vvc) - (dx(v)+dy(u))*dx(vvc)
                + (dx(u)+dy(v))*ppc  ) 
    + int2d(ThC)( (y<=intfShft)*((indk==1)*uuc+(indk==2)*vvc) )
    + on(5,u=0,v=0) + on(4,u=uper,v=vper);

// Solve the permeability problem, compute effective parameters
uper[] = uper1[];
indk = 1; stokesKc; uK1[] = u[];
real[int,int] itfK(2,2);
real[int,int] tildeF1(1,2), vecF1(1,2);
// Volume average for interiour permeability
real avgVu; volAvg(ymax-1,ymax,50,ThC,u,avgVu) itfK(0,0) = avgVu;
real avgVv; volAvg(ymax-1,ymax,50,ThC,v,avgVv) itfK(1,0) = avgVv;
// Volume avarage for pressure jump
real avgVpTop; volAvgI(ymax-1,ymax,50,ThC,p,avgVpTop)
real avgVpBot; volAvgI(ymin,ymin+1,50,ThC,p,avgVpBot)
tildeF1(0,0) = avgVpBot - avgVpTop;
// Check the divergence of the solution
avgDiv(0) = int2d(ThC)(dx(u)+dy(v))/int2d(ThC)(1.0);
// Repeate for the second forcing direction
uper[] = uper2[];
indk = 2; stokesKc; uK2[] = u[];
volAvg(ymax-1,ymax,50,ThC,u,avgVu) itfK(0,1) = avgVu;
volAvg(ymax-1,ymax,50,ThC,v,avgVv) itfK(1,1) = avgVv;
volAvgI(ymax-1,ymax,50,ThC,p,avgVpTop)
volAvgI(ymin,ymin+1,50,ThC,p,avgVpBot)
tildeF1(0,1) = avgVpBot - avgVpTop;
avgDiv(1) = int2d(ThC)(dx(u)+dy(v))/int2d(ThC)(1.0);
// Transform the resistance vector in velocity space
real[int,int] invK = itrK^-1;
vecF1 = tildeF1*invK;
for(int i=0;i<2;i++) vecF1(0,i) = -vecF1(0,i); // Adding negative sign

// Define the problem for the slip
problem stokesLc([u,v,p],[uuc,vvc,ppc],solver=sparsesolver) =
    int2d(ThC)( - (-p + 2.0*dx(u))*dx(uuc) - (dy(u)+dx(v))*dy(uuc)
                - (-p + 2.0*dy(v))*dy(vvc) - (dx(v)+dy(u))*dx(vvc)
                + (dx(u)+dy(v))*ppc  )
    + int1d(ThC,8)( uuc )
    + on(4,5,u=0,v=0);

// Solve the slip problem, do the post-processing
real itfL, itfM, tildeF2, vecF2;
real[int] chckZero(2);
stokesLc; uL[] = u[];
volAvg(ymax-1,ymax,50,ThC,u,avgVu) itfL        = avgVu;
volAvg(ymax-1,ymax,50,ThC,v,avgVv) chckZero(0) = avgVv;
volAvgI(ymax-1,ymax,50,ThC,p,avgVpTop)
volAvgI(ymin,ymin+1,50,ThC,p,avgVpBot)
tildeF2 = avgVpBot - avgVpTop;
volAvg(ymin,intfShft,Nstr*50,ThC,u,itfM)
itfM = itfM/itfL;
chckZero(1) = int2d(ThC)(dx(u)+dy(v))/int2d(ThC)(1.0);
vecF2 = tildeF2/itfL;

// Output information about interior computation
cout << endl;
cout << " ---------------- Interface cell computation done ---------------- " << endl;
cout << " Investigated interface location yif = " << intfShft << endl << endl;

cout << " ---------------- Interface permeability" << endl;
cout << " itfK/l^2 = " << itfK << endl;
cout << " tildeF1/(l*mu) = " << tildeF1 << endl;
cout << " vecF1*l/mu = " << vecF1 << endl;
cout << " Average divergence = " << avgDiv << endl << endl;

cout << " ---------------- Interface slip" << endl;
cout << " itfL/l = " << itfL << endl;
cout << " itfM/l = " << itfM << endl;
cout << " tildeF2/mu = " << tildeF2 << endl;
cout << " vecF2*l/mu = " << vecF2 << endl;
cout << " Checks (divergence, itfnormalvel) = " << chckZero << endl;
cout << " ----------------------------------------------------------------- " << endl << endl;

// Output plane averaged results, permeability
linAvgSave(ThC, Nsamp, uK1, vK1, pK1, "2D_bound_cond_Ki1prof.txt")
linAvgSave(ThC, Nsamp, uK2, vK2, pK2, "2D_bound_cond_Ki2prof.txt")
linAvgSave(ThC, Nsamp, uL, vL, pL, "2D_bound_cond_Lprof.txt")

cout << " -------------- Plane average output to file done ---------------- " << endl;

// Plot chosen results (macro and colorscheme defined in the include file)
plotfields("perm",1,80,colorsJET)
plotfields("perm",2,80,colorsJET)
plotfields("slip",1,80,colorsJET)

cout << " ------------------- All computations done ----------------------- " << endl;
