// ----------------------------------------------- COPYRIGHT --------------------------------------
// Copyright 2016-2019
// Ugis Lacis, ugis.lacis@gmail.com
// Shervin Bagheri, shervin.bagheri@mech.kth.se
// -------------------------------------------- LICENSE LGPLv3 ------------------------------------
// This file is part of Porous_full_bc2ifScales.
//
// Porous_full_bc2ifScales is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Porous_full_bc2ifScales is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Porous_full_bc2ifScales. If not, see <http://www.gnu.org/licenses/>.
// ---------------------------------------------- DESCRIPTION -------------------------------------
// Set of macros for convenient geometry manupulation. The switching between
// porous and textured surface is done through macro "Type".
//
// For porous structures, it does changing length of the interface cell.
// This file expects that
// the main file defines number of structures macro (Nstr) as well as single
// structure name macro (strNm), border macro (strB), surface length
// (strL), mesh resolution (n) and surface refinement (nS)
//
// This provides macros defB to define border and genM for mesh generation

// List of dummy macro generations, to output needed error message for unsupported configurations
IFMACRO(Type,porous) IFMACRO(itfFlag,zero)
cout << "Error: zero interface location not supported for porous surfaces (assumed smooth)!" << endl;
macro defGeomTop()//
macro defGeomItf()//
macro defGeomBot()//
macro genMesh()//
exit(1);
ENDIFMACRO ENDIFMACRO

// Default number of structures
IFMACRO(Type,porous)
IFMACRO(!Nstr)
macro Nstr()4// EOM
ENDIFMACRO
ENDIFMACRO


// Top geometry macro, if interface is above structures (general)
IFMACRO(itfFlag,above)
macro defGeomTop()
border sqr1ct(t=yi,ymax) {x= 0.5; y=t;        label=1; }
border sqr2ct(t=0.5,-0.5){x=t;    y=ymax;     label=2; }
border sqr3ct(t=ymax,yi) {x=-0.5; y=t;        label=3; }
// EOM
macro defGeomItf()
border sqr4ct(t=-0.5,0.5){x=t;    y=yi; label=8; }
// EOM
macro genMeshTop()sqr1ct(n*(ymax-yi))+sqr2ct(n)+sqr3ct(n*(ymax-yi))+sqr4ct(nI*n)// EOM
IFMACRO(Type,porous)
macro defGeomBot()
border sqr1cb(t=ymin,yi)  {x= 0.5; y=t;        label=1; }
border sqr3cb(t=yi,ymin)  {x=-0.5; y=t;        label=3; }
border sqr4cb(t=-0.5,0.5) {x=t;    y=ymin;     label=4; }
// EOM
macro genMesh()
ThC=buildmesh( genMeshTop
              +sqr3cb(n*(yi-ymin))+sqr4cb(nI*n)+sqr1cb(n*(yi-ymin))
              +genM );
// EOM
ENDIFMACRO
ENDIFMACRO


// Defining the geometry presets

// Triangle cavity, requires dpth to be defined in the main file
IFMACRO(geomPreset,tricav)
IFMACRO(itfFlag,above)
macro defGeomBot()
border sqc1cb(t=0.0,yi)  {x= 0.5;      y=t;           label=1; }
border sqc3cb(t=yi,0.0)  {x=-0.5;      y=t;           label=3; }
border sqc4cb(t=0.0,1.0) {x=-0.5+t/2.0;y=-t*dpth;     label=5; }
border sqc5cb(t=0.0,1.0) {x=t/2.0;     y=-dpth+t*dpth;label=5; }
// EOM
macro genMesh()
ThC=buildmesh( genMeshTop+sqc1cb(nS*n*yi)+sqc3cb(nS*n*yi)
              +sqc4cb(nS*n*sqrt(dpth^2+0.25))+sqc5cb(nS*n*sqrt(dpth^2+0.25)) );
// EOM
ENDIFMACRO
IFMACRO(itfFlag,zero)
macro defGeomTop()
border sqr1ct(t=0.0,ymax) {x= 0.5; y=t;        label=1; }
border sqr2ct(t=0.5,-0.5) {x=t;    y=ymax;     label=2; }
border sqr3ct(t=ymax,0.0) {x=-0.5; y=t;        label=3; }
// EOM
macro defGeomItf()
border sqr4ct(t=-0.5,0.5){x=t;    y=0.0; label=8; }
// EOM
macro genMeshTop()sqr1ct(n*(ymax-yi))+sqr2ct(n)+sqr3ct(n*(ymax-yi))+sqr4ct(nI*n)// EOM
macro defGeomBot()
border sqc4cb(t=0.0,1.0) {x=-0.5+t/2.0;y=-t*dpth;     label=5; }
border sqc5cb(t=0.0,1.0) {x=t/2.0;     y=-dpth+t*dpth;label=5; }
// EOM
macro genMesh()
ThC=buildmesh( genMeshTop
              +sqc4cb(nS*n*sqrt(dpth^2+0.25))+sqc5cb(nS*n*sqrt(dpth^2+0.25)) );
// EOM
ENDIFMACRO
ymin = -dpth;
cout << endl << endl;
cout << " --------------- Defined triangular cavity geometry ------------- " << endl;
cout << " Chosen depth = " << dpth << endl;
cout << " ----------------------------------------------------------------- " << endl;
ENDIFMACRO

// Square cavity, requires wdth and dpth to be defined in the main file
IFMACRO(geomPreset,rctcav)
assert(wdth < 1-0.1/(n*nS));
IFMACRO(itfFlag,above)
macro defGeomBot()
border sqc1cb(t=0.0,yi)        {x= 0.5;   y=t;    label=1; }
border sqc3cb(t=yi,0.0)        {x=-0.5;   y=t;    label=3; }
border sqc4cb(t=-0.5,-wdth/2)  {x= t;     y=0.0;  label=5; }
border sqc5cb(t=0.0,-dpth)     {x=-wdth/2;y=t;    label=5; }
border sqc6cb(t=-wdth/2,wdth/2){x= t;     y=-dpth;label=5; }
border sqc7cb(t=-dpth,0.0)     {x= wdth/2;y=t;    label=5; }
border sqc8cb(t=wdth/2,0.5)    {x= t;     y=0.0;  label=5; }
// EOM
macro genMesh()
ThC=buildmesh( genMeshTop+sqc1cb(nS*n*yi)+sqc3cb(nS*n*yi)
              +sqc4cb(nS*n*(1.0-wdth)/2)+sqc5cb(nS*n*dpth)+sqc6cb(nS*n*wdth)
              +sqc7cb(nS*n*dpth)+sqc8cb(nS*n*(1.0-wdth)/2) );
// EOM
ENDIFMACRO
IFMACRO(itfFlag,zero)
macro defGeomTop()
border sqr1ct(t=0.0,ymax) {x= 0.5; y=t;        label=1; }
border sqr2ct(t=0.5,-0.5) {x=t;    y=ymax;     label=2; }
border sqr3ct(t=ymax,0.0) {x=-0.5; y=t;        label=3; }
// EOM
macro defGeomItf()
border sqr4ct(t=-wdth/2,wdth/2){x=t;    y=0.0; label=8; }
// EOM
macro genMeshTop()sqr1ct(n*(ymax-yi))+sqr2ct(n)+sqr3ct(n*(ymax-yi))+sqr4ct(nI*n*wdth)// EOM
macro defGeomBot()
border sqc4cb(t=-0.5,-wdth/2)  {x= t;     y=0.0;  label=5; }
border sqc5cb(t=0.0,-dpth)     {x=-wdth/2;y=t;    label=5; }
border sqc6cb(t=-wdth/2,wdth/2){x= t;     y=-dpth;label=5; }
border sqc7cb(t=-dpth,0.0)     {x= wdth/2;y=t;    label=5; }
border sqc8cb(t=wdth/2,0.5)    {x= t;     y=0.0;  label=5; }
// EOM
macro genMesh()
ThC=buildmesh( genMeshTop
              +sqc4cb(nS*n*(1.0-wdth)/2)+sqc5cb(nS*n*dpth)+sqc6cb(nS*n*wdth)
              +sqc7cb(nS*n*dpth)+sqc8cb(nS*n*(1.0-wdth)/2) );
// EOM
ENDIFMACRO
ymin = -dpth;
cout << endl << endl;
cout << " --------------- Defined rectangular cavity geometry ------------- " << endl;
cout << " Chosen width = " << wdth << " and depth = " << dpth << endl;
cout << " ----------------------------------------------------------------- " << endl;
ENDIFMACRO

// Isotropic cylinder, requires thetas to be defined in the main file
IFMACRO(geomPreset,cylinder)
real cylr   = sqrt(thetas/pi);
real strL   = 2*pi*cylr, strL0 = strL;
assert(thetas > 0.0); assert(cylr < 0.5 );
macro strBd0()border strBrd0 (t=0,2*pi) {x=cylr*cos(t); y=cylr*sin(t)-cylr;    label=5; } // EOM
macro strBd(N)border strBrd#N(t=0,2*pi) {x=cylr*cos(t); y=cylr*sin(t)-cylr-#N; label=5; } // EOM
ymin = -Nstr+0.5-cylr;
cout << endl << endl;
cout << " --------------- Defined isotropic cylinder geometry ------------- " << endl;
cout << " Chosen solid volume fraction, thetas = " << thetas << endl;
cout << " Resulting cylinder radius,   cylr   = " << cylr << endl;
cout << " ----------------------------------------------------------------- " << endl;
ENDIFMACRO

// Layered cylinder, requires thetas and thetas0 to be defined in the main file
IFMACRO(geomPreset,laycyl)
real cylr   = sqrt(thetas/pi);
real cylr0  = sqrt(thetas0/pi);
real strL   = 2*pi*cylr;
real strL0  = 2*pi*cylr0;
assert(thetas > 0.0); assert(thetas0 > 0.0); assert(cylr < 0.5 );  assert(cylr0 < 0.5 );
macro strBd0()border strBrd0 (t=0,2*pi) {x=cylr0*cos(t); y=cylr0*sin(t)-cylr0;    label=5; } // EOM
macro strBd(N)border strBrd#N(t=0,2*pi) {x=cylr *cos(t); y=cylr *sin(t)-cylr0-#N; label=5; } // EOM
ymin = -Nstr+0.5-cylr0;
cout << endl << endl;
cout << " --------------- Defined layered cylinder geometry ------------- " << endl;
cout << " Chosen solid volume fractions, thetas = " << thetas << ", thetas0 = " << thetas0 << endl;
cout << " Resulting cylinder radii, cylr = " << cylr << ", cylr = " << cylr0 << endl;
cout << " ----------------------------------------------------------------- " << endl;
ENDIFMACRO

// Ellipse geometry, requires thetas, ar, ang to be defined in the main file
IFMACRO(geomPreset,ellipse)
load "gsl"
real semiB = sqrt(thetas/(pi*ar)), semiA = ar*semiB;
real ecc   = sqrt(1-semiB^2/semiA^2);
real strL  = 4*semiA*gslsfellintEcomp(ecc,0), strL0 = strL;
real ySft;
if(ang == 0) ySft = semiB;
else
{
    real parTm = atan(semiB/semiA*1/tan(ang));
    ySft  = 2*((ang>0)-0.5)*(semiA*cos(parTm)*sin(ang) + semiB*sin(parTm)*cos(ang));
}
assert(thetas > 0.0); assert(semiA < 0.5 );
macro strBd0()border strBrd0 (t=0,2*pi) {x=semiA*cos(t)*cos(ang) - semiB*sin(t)*sin(ang);
                                         y=semiA*cos(t)*sin(ang) + semiB*sin(t)*cos(ang)-ySft;    label=5; } // EOM
macro strBd(N)border strBrd#N(t=0,2*pi) {x=semiA*cos(t)*cos(ang) - semiB*sin(t)*sin(ang);
                                         y=semiA*cos(t)*sin(ang) + semiB*sin(t)*cos(ang)-ySft-#N; label=5; } // EOM
ymin = -Nstr+0.5-ySft;
cout << endl << endl;
cout << " ----------------- Defined tilted ellipse geometry --------------- " << endl;
cout << " Chosen solid volume fraction, thetas = " << thetas << ", ar = " << ar << "," << endl;
cout << " tilt angle ang = " << ang << " (rad)" << ", " << ang/pi*180 << " [deg]" << endl;
cout << " Resulting ellipse semi-axis, semiA = " << semiA << ", semiB = " << semiB << "," << endl;
cout << " and circumference strL = " << strL << endl; 
cout << " ----------------------------------------------------------------- " << endl;
ENDIFMACRO

// Check if needed macro has been defined for porous set-ups
IFMACRO(Type,porous)
IFMACRO(!strBd0)
cout << "ERROR: The macro 'geomPreset' must be set to allowed value, or border difened by yourself!" << endl;
cout << "Tip. Check allowed names in 2D_MSE_bc_geom.idp, use correct spelling and no white spaces!" << endl;
exit(1);
ENDIFMACRO
ENDIFMACRO

// Unrolling border macros
IFMACRO(Nstr,1)
macro defGeomPor()strBd0// EOM
macro genM()strBrd0(-strL0*n*nS)// EOM
ENDIFMACRO

IFMACRO(Nstr,2)
macro defGeomPor()strBd0
strBd(1)
// EOM
macro genM()strBrd0(-strL0*n*nS)
+strBrd1(-strL*n*nS)// EOM
ENDIFMACRO

IFMACRO(Nstr,3)
macro defGeomPor()strBd0
strBd(1)
strBd(2)// EOM
macro genM()strBrd0(-strL0*n*nS)
+strBrd1(-strL*n*nS)+strBrd2(-strL*n*nS)// EOM
ENDIFMACRO

IFMACRO(Nstr,4)
macro defGeomPor()strBd0
strBd(1)
strBd(2)
strBd(3)// EOM
macro genM()strBrd0(-strL0*n*nS)
+strBrd1(-strL*n*nS)+strBrd2(-strL*n*nS)
+strBrd3(-strL*n*nS)// EOM
ENDIFMACRO

IFMACRO(Nstr,5)
macro defGeomPor()strBd0
strBd(1)
strBd(2)
strBd(3)
strBd(4)// EOM
macro genM()strBrd0(-strL0*n*nS)
+strBrd1(-strL*n*nS)+strBrd2(-strL*n*nS)
+strBrd3(-strL*n*nS)+strBrd4(-strL*n*nS)// EOM
ENDIFMACRO

IFMACRO(Nstr,6)
macro defGeomPor()strBd0
strBd(1)
strBd(2)
strBd(3)
strBd(4)
strBd(5)// EOM
macro genM()strBrd0(-strL0*n*nS)
+strBrd1(-strL*n*nS)+strBrd2(-strL*n*nS)
+strBrd3(-strL*n*nS)+strBrd4(-strL*n*nS)
+strBrd5(-strL*n*nS)// EOM
ENDIFMACRO

// border mesh macro for the interior problem
macro genMi(N)strBrd#N(-strL*n*nS)// EOM

// Check if needed macro has been defined
IFMACRO(!defGeomPor)
cout << "ERROR: The macro 'Nstr' must be set appropriate integer value!" << endl;
cout << "Remember! No white space before and after the integer." << endl;
exit(1);
ENDIFMACRO
